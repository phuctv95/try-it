{"version":3,"sources":["Header.tsx","DataInput.tsx","calculator.ts","CalculatedResult.tsx","SalaryCalculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","Component","DataInput","props","handleGrossChange","bind","handleNumberOfDependantChange","e","this","onGrossChange","target","value","onNumberOfDependantChange","htmlFor","gross","onChange","type","min","step","id","numberOfDependant","MaxSocialInsurance","MaxHealthInsurance","MaxUnemploymentInsurance","calculateNet","taxableIncome","result","socialInsurance","healthInsurance","unemploymentInsurance","incomeBeforeTax","personalReduction","dependantReduction","tax","net","CalculatedResult","calculated","toLocaleString","SalaryCalculator","state","setState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d56a2f4.chunk.js","sourcesContent":["import { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return <h2 className=\"text-center\">Salary Calculator</h2>;\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import { Component } from 'react';\r\n\r\ninterface Property {\r\n    onGrossChange: (gross: number) => void;\r\n    onNumberOfDependantChange: (numberOfDependant: number) => void;\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass DataInput extends Component<Property, {}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleGrossChange = this.handleGrossChange.bind(this);\r\n        this.handleNumberOfDependantChange = this.handleNumberOfDependantChange.bind(this);\r\n    }\r\n\r\n    handleGrossChange(e: any) {\r\n        this.props.onGrossChange(+ e.target.value);\r\n    }\r\n\r\n    handleNumberOfDependantChange(e: any) {\r\n        this.props.onNumberOfDependantChange(+ e.target.value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"gross\">GROSS (VND):</label>\r\n                <div className=\"input-group mb-3\">\r\n                    <input value={this.props.gross} onChange={this.handleGrossChange}\r\n                        type=\"number\" min=\"0\" step=\"1000000\" className=\"form-control\" id=\"gross\"/>\r\n                </div>\r\n                <label htmlFor=\"numberOfDependant\">Số người phụ thuộc:</label>\r\n                <div className=\"input-group mb-3\">\r\n                    <input value={this.props.numberOfDependant} onChange={this.handleNumberOfDependantChange}\r\n                        type=\"number\" min=\"0\" className=\"form-control\" id=\"numberOfDependant\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataInput;\r\n","const OneMillion = 1000000;\r\nconst MaxSocialInsurance = 2.384 * OneMillion;\r\nconst MaxHealthInsurance = 0.447 * OneMillion;\r\nconst MaxUnemploymentInsurance = 0.884 * OneMillion;\r\n\r\ninterface Net {\r\n    socialInsurance: number;\r\n    healthInsurance: number;\r\n    unemploymentInsurance: number;\r\n    incomeBeforeTax: number;\r\n    personalReduction: number;\r\n    dependantReduction: number;\r\n    taxableIncome: number;\r\n    tax: number;\r\n    net: number;\r\n}\r\n\r\nfunction calculateTax(taxableIncome: number): number {\r\n    if (taxableIncome <= 5 * OneMillion) {\r\n        return 0.05 * taxableIncome;\r\n    }\r\n    if (taxableIncome <= 10 * OneMillion) {\r\n        return 0.1 * taxableIncome - 0.25 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 18 * OneMillion) {\r\n        return 0.15 * taxableIncome - 0.75 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 32 * OneMillion) {\r\n        return 0.2 * taxableIncome - 1.65 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 52 * OneMillion) {\r\n        return 0.25 * taxableIncome - 3.25 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 80 * OneMillion) {\r\n        return 0.3 * taxableIncome - 5.85 * OneMillion;\r\n    }\r\n    return 0.35 * taxableIncome - 9.85 * OneMillion;\r\n}\r\n\r\nfunction calculateNet(gross: number, numberOfDependant: number): Net {\r\n    let result = {} as Net;\r\n    \r\n    result.socialInsurance = gross * 0.08;\r\n    result.socialInsurance = result.socialInsurance > MaxSocialInsurance\r\n        ? MaxSocialInsurance : result.socialInsurance;\r\n    result.healthInsurance = gross * 0.015;\r\n    result.healthInsurance = result.healthInsurance > MaxHealthInsurance\r\n        ? MaxHealthInsurance : result.healthInsurance;\r\n    result.unemploymentInsurance = gross * 0.01;\r\n    result.unemploymentInsurance = result.unemploymentInsurance > MaxUnemploymentInsurance\r\n        ? MaxUnemploymentInsurance : result.unemploymentInsurance;\r\n    \r\n    result.incomeBeforeTax = gross - (result.socialInsurance +\r\n        result.healthInsurance + result.unemploymentInsurance);\r\n    result.personalReduction = 11 * OneMillion;\r\n    result.dependantReduction = 4.4 * OneMillion * numberOfDependant;\r\n    result.taxableIncome = result.incomeBeforeTax -\r\n        (result.personalReduction + result.dependantReduction);\r\n    result.taxableIncome = result.taxableIncome < 0 ? 0 : result.taxableIncome;\r\n    result.tax = calculateTax(result.taxableIncome);\r\n    result.net = result.incomeBeforeTax - result.tax;\r\n\r\n    return result;\r\n}\r\n\r\nexport default calculateNet;\r\n","import { Component } from 'react';\r\nimport calculateNet from './calculator';\r\n\r\ninterface Property {\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass CalculatedResult extends Component<Property, {}> {\r\n    render() {\r\n        let calculated = calculateNet(this.props.gross, this.props.numberOfDependant);\r\n        return (\r\n            <table className=\"table table-sm table-bordered table-hover mt-3\">\r\n                <tbody>\r\n                    <tr className=\"font-weight-bold\">\r\n                        <td>GROSS</td>\r\n                        <td className=\"text-right\">{this.props.gross.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHXH (8%)</td>\r\n                        <td className=\"text-right\">-{calculated.socialInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHYT (1.5%)</td>\r\n                        <td className=\"text-right\">-{calculated.healthInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHTN (1%)</td>\r\n                        <td className=\"text-right\">-{calculated.unemploymentInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thu nhập trước thuế</td>\r\n                        <td className=\"text-right\">{calculated.incomeBeforeTax.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Giảm trừ gia cảnh bản thân</td>\r\n                        <td className=\"text-right\">-{calculated.personalReduction.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Giảm trừ gia cảnh người phụ thuộc</td>\r\n                        <td className=\"text-right\">-{calculated.dependantReduction.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thu nhập chịu thuế</td>\r\n                        <td className=\"text-right\">{calculated.taxableIncome.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thuế thu nhập cá nhân</td>\r\n                        <td className=\"text-right\">{calculated.tax.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr className=\"font-weight-bold\">\r\n                        <td>NET</td>\r\n                        <td className=\"text-right\">{calculated.net.toLocaleString()}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatedResult;\r\n","import { Component } from 'react';\r\nimport Header from './Header';\r\nimport DataInput from './DataInput';\r\nimport CalculatedResult from './CalculatedResult';\r\n\r\ninterface State {\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass SalaryCalculator extends Component<{}, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.handleGrossChange = this.handleGrossChange.bind(this);\r\n        this.handleNumberOfDependantChange = this.handleNumberOfDependantChange.bind(this);\r\n\r\n        this.state = {\r\n            gross: 0,\r\n            numberOfDependant: 0,\r\n        };\r\n    }\r\n\r\n    handleGrossChange(gross: number) {\r\n        this.setState({\r\n            gross: gross,\r\n        });\r\n    }\r\n\r\n    handleNumberOfDependantChange(numberOfDependant: number) {\r\n        this.setState({\r\n            numberOfDependant: numberOfDependant,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row mb-4 mt-3\">\r\n                    <div className=\"col\">\r\n                        <Header/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col col-md-6\">\r\n                        <DataInput gross={this.state.gross} onGrossChange={this.handleGrossChange}\r\n                            numberOfDependant={this.state.numberOfDependant} onNumberOfDependantChange={this.handleNumberOfDependantChange}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col col-md-6\">\r\n                        <CalculatedResult gross={this.state.gross} numberOfDependant={this.state.numberOfDependant}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalaryCalculator;\r\n","import './App.css';\r\nimport SalaryCalculator from './SalaryCalculator';\r\n\r\nfunction App() {\r\n  return (\r\n    <SalaryCalculator/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}