{"version":3,"sources":["AnimationShapes.tsx","tools.ts","Header.tsx","NumberInput.tsx","DataInput.tsx","calculator.ts","CalculatedResult.tsx","SalaryCalculator.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ShapeType","random","min","max","Math","ceil","floor","AnimationShapes","NumberOfShapes","key","shapeType","anEnum","enumValues","Object","keys","map","n","Number","parseInt","filter","isNaN","length","randomEnum","size","style","width","height","left","animationDuration","animationDelay","Square","className","Circle","Rectangle","shapes","i","this","push","generateAnimationShape","generateAnimationShapes","Component","Header","NumberInput","props","handleOnChange","bind","handleOnFocus","handleOnWheel","value","thousandSeparator","toLocaleString","toString","e","userEnteredNumber","removeNoneDigitsLetter","target","onChange","selectAllOnFocus","select","deltaY","step","userEnterNumber","isNegative","removedAllNoneDigits","replace","getDisplayValue","id","onFocus","onWheel","type","DataInput","handleGrossChange","handleNumberOfDependantChange","state","onGrossChange","onNumberOfDependantChange","htmlFor","gross","numberOfDependant","MaxSocialInsurance","MaxHealthInsurance","MaxUnemploymentInsurance","CalculatedResult","calculated","taxableIncome","result","socialInsurance","healthInsurance","unemploymentInsurance","incomeBeforeTax","personalReduction","dependantReduction","tax","net","calculateNet","SalaryCalculator","setState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.866ab548.chunk.js","sourcesContent":["import { Component, CSSProperties, ReactNode } from \"react\";\r\nimport './AnimationShapes.css';\r\nimport { random, randomEnum } from \"./tools\";\r\n\r\nenum ShapeType { Square, Circle, Rectangle }\r\n\r\nclass AnimationShapes extends Component {\r\n    readonly NumberOfShapes = 10;\r\n\r\n    generateAnimationShape(key: string | number): ReactNode {\r\n        let shapeType = randomEnum(ShapeType);\r\n        let size = random(3, 7);\r\n        let style = {\r\n            width: `${size}vw`,\r\n            height: `${size}vw`,\r\n            left: `${random(5, 95)}vw`,\r\n            animationDuration: `${random(10, 20)}s`,\r\n            animationDelay: `${random(0, 10)}s`,\r\n        } as CSSProperties;\r\n        if (shapeType === ShapeType.Square) {\r\n            return <div key={key} className=\"shape\" style={style}></div>;\r\n        }\r\n        if (shapeType === ShapeType.Circle) {\r\n            return <div key={key} className=\"shape circle\" style={style}></div>;\r\n        }\r\n        if (shapeType === ShapeType.Rectangle) {\r\n            return <div key={key} className=\"shape\" style={{\r\n                ...style,\r\n                width: `${random(2, 4)}vw`,\r\n                height: `${random(6, 9)}vw`,\r\n            }}></div>;\r\n        }\r\n    }\r\n\r\n    generateAnimationShapes(): ReactNode[] {\r\n        let shapes = [] as ReactNode[];\r\n        for (let i = 0; i < this.NumberOfShapes; i++) {\r\n            shapes.push(this.generateAnimationShape(i));\r\n        }\r\n        return shapes;\r\n    }\r\n\r\n    randomShapeType() {\r\n        return ShapeType.Square;\r\n    }\r\n\r\n    render(): ReactNode {\r\n        return (\r\n            <div>{this.generateAnimationShapes()}</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AnimationShapes;\r\n","export function random(min: number, max: number): number {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nexport function randomEnum<T>(anEnum: T): T[keyof T] {\r\n    const enumValues = Object.keys(anEnum)\r\n        .map(n => Number.parseInt(n))\r\n        .filter(n => !Number.isNaN(n)) as unknown as T[keyof T][]\r\n    const randomIndex = Math.floor(Math.random() * enumValues.length)\r\n    const randomEnumValue = enumValues[randomIndex]\r\n    return randomEnumValue;\r\n}\r\n","import { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return <h2 className=\"text-center\">Salary Calculator</h2>;\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import { Component } from \"react\";\r\n\r\ninterface Properties {\r\n    id: string;\r\n    value: number;\r\n    onChange: (value: number) => void;\r\n    thousandSeparator: boolean;\r\n    selectAllOnFocus: boolean;\r\n    step: number;\r\n}\r\n\r\ninterface State {\r\n}\r\n\r\nexport class NumberInput extends Component<Properties, State> {\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.handleOnChange = this.handleOnChange.bind(this);\r\n        this.handleOnFocus = this.handleOnFocus.bind(this);\r\n        this.handleOnWheel = this.handleOnWheel.bind(this);\r\n    }\r\n\r\n    getDisplayValue(value: number): string {\r\n        return this.props.thousandSeparator\r\n            ? value.toLocaleString()\r\n            : value.toString();\r\n    }\r\n\r\n    handleOnChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const userEnteredNumber = this.removeNoneDigitsLetter(e.target.value);\r\n        this.props.onChange(userEnteredNumber);\r\n    }\r\n\r\n    handleOnFocus(e: React.FocusEvent<HTMLInputElement>) {\r\n        if (this.props.selectAllOnFocus) {\r\n            e.target.select();\r\n        }\r\n    }\r\n\r\n    handleOnWheel(e: React.WheelEvent<HTMLInputElement>) {\r\n        this.props.onChange(e.deltaY < 0\r\n            ? this.props.value + this.props.step\r\n            : this.props.value - this.props.step);\r\n    }\r\n\r\n    removeNoneDigitsLetter(userEnterNumber: string): number {\r\n        const isNegative = userEnterNumber[0] === '-';\r\n        const removedAllNoneDigits = userEnterNumber.replace(/\\D+/g, '');\r\n        return isNegative ? - removedAllNoneDigits : + removedAllNoneDigits;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <input value={this.getDisplayValue(this.props.value)} onChange={this.handleOnChange}\r\n                id={this.props.id} onFocus={this.handleOnFocus} onWheel={this.handleOnWheel}\r\n                type=\"text\" className=\"form-control\"/>\r\n        );\r\n    }\r\n}","import { Component } from 'react';\r\nimport { NumberInput } from './NumberInput';\r\n\r\ninterface Property {\r\n    onGrossChange: (gross: number) => void;\r\n    onNumberOfDependantChange: (numberOfDependant: number) => void;\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass DataInput extends Component<Property, {value: number}> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.handleGrossChange = this.handleGrossChange.bind(this);\r\n        this.handleNumberOfDependantChange = this.handleNumberOfDependantChange.bind(this);\r\n        this.state = {value: 123};\r\n    }\r\n\r\n    handleGrossChange(value: number) {\r\n        this.props.onGrossChange(value);\r\n    }\r\n\r\n    handleNumberOfDependantChange(value: number) {\r\n        this.props.onNumberOfDependantChange(value);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor=\"gross\">GROSS (VND):</label>\r\n                <div className=\"input-group mb-3\">\r\n                    <NumberInput value={this.props.gross} onChange={this.handleGrossChange}\r\n                        thousandSeparator={true} selectAllOnFocus={true} step={1000000} id=\"gross\"/>\r\n                </div>\r\n                <label htmlFor=\"numberOfDependant\">Số người phụ thuộc:</label>\r\n                <div className=\"input-group mb-3\">\r\n                    <NumberInput value={this.props.numberOfDependant} onChange={this.handleNumberOfDependantChange}\r\n                        thousandSeparator={true} selectAllOnFocus={true} step={1} id=\"numberOfDependant\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DataInput;\r\n","const OneMillion = 1000000;\r\nconst MaxSocialInsurance = 2.384 * OneMillion;\r\nconst MaxHealthInsurance = 0.447 * OneMillion;\r\nconst MaxUnemploymentInsurance = 0.884 * OneMillion;\r\n\r\ninterface Net {\r\n    socialInsurance: number;\r\n    healthInsurance: number;\r\n    unemploymentInsurance: number;\r\n    incomeBeforeTax: number;\r\n    personalReduction: number;\r\n    dependantReduction: number;\r\n    taxableIncome: number;\r\n    tax: number;\r\n    net: number;\r\n}\r\n\r\nfunction calculateTax(taxableIncome: number): number {\r\n    if (taxableIncome <= 5 * OneMillion) {\r\n        return 0.05 * taxableIncome;\r\n    }\r\n    if (taxableIncome <= 10 * OneMillion) {\r\n        return 0.1 * taxableIncome - 0.25 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 18 * OneMillion) {\r\n        return 0.15 * taxableIncome - 0.75 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 32 * OneMillion) {\r\n        return 0.2 * taxableIncome - 1.65 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 52 * OneMillion) {\r\n        return 0.25 * taxableIncome - 3.25 * OneMillion;\r\n    }\r\n    if (taxableIncome <= 80 * OneMillion) {\r\n        return 0.3 * taxableIncome - 5.85 * OneMillion;\r\n    }\r\n    return 0.35 * taxableIncome - 9.85 * OneMillion;\r\n}\r\n\r\nexport function calculateNet(gross: number, numberOfDependant: number): Net {\r\n    let result = {} as Net;\r\n    \r\n    result.socialInsurance = gross * 0.08;\r\n    result.socialInsurance = result.socialInsurance > MaxSocialInsurance\r\n        ? MaxSocialInsurance : result.socialInsurance;\r\n    result.healthInsurance = gross * 0.015;\r\n    result.healthInsurance = result.healthInsurance > MaxHealthInsurance\r\n        ? MaxHealthInsurance : result.healthInsurance;\r\n    result.unemploymentInsurance = gross * 0.01;\r\n    result.unemploymentInsurance = result.unemploymentInsurance > MaxUnemploymentInsurance\r\n        ? MaxUnemploymentInsurance : result.unemploymentInsurance;\r\n    \r\n    result.incomeBeforeTax = gross - (result.socialInsurance +\r\n        result.healthInsurance + result.unemploymentInsurance);\r\n    result.personalReduction = 11 * OneMillion;\r\n    result.dependantReduction = 4.4 * OneMillion * numberOfDependant;\r\n    result.taxableIncome = result.incomeBeforeTax -\r\n        (result.personalReduction + result.dependantReduction);\r\n    result.taxableIncome = result.taxableIncome < 0 ? 0 : result.taxableIncome;\r\n    result.tax = calculateTax(result.taxableIncome);\r\n    result.net = result.incomeBeforeTax - result.tax;\r\n\r\n    return result;\r\n}\r\n","import { Component } from 'react';\r\nimport { calculateNet } from './calculator';\r\n\r\ninterface Property {\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass CalculatedResult extends Component<Property, {}> {\r\n    render() {\r\n        let calculated = calculateNet(this.props.gross, this.props.numberOfDependant);\r\n        return (\r\n            <table className=\"table table-sm table-bordered table-hover mt-3\">\r\n                <tbody>\r\n                    <tr className=\"font-weight-bold\">\r\n                        <td>GROSS</td>\r\n                        <td className=\"text-right\">{this.props.gross.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHXH (8%)</td>\r\n                        <td className=\"text-right\">-{calculated.socialInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHYT (1.5%)</td>\r\n                        <td className=\"text-right\">-{calculated.healthInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>BHTN (1%)</td>\r\n                        <td className=\"text-right\">-{calculated.unemploymentInsurance.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thu nhập trước thuế</td>\r\n                        <td className=\"text-right\">{calculated.incomeBeforeTax.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Giảm trừ gia cảnh bản thân</td>\r\n                        <td className=\"text-right\">-{calculated.personalReduction.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Giảm trừ gia cảnh người phụ thuộc</td>\r\n                        <td className=\"text-right\">-{calculated.dependantReduction.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thu nhập chịu thuế</td>\r\n                        <td className=\"text-right\">{calculated.taxableIncome.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Thuế thu nhập cá nhân</td>\r\n                        <td className=\"text-right\">{calculated.tax.toLocaleString()}</td>\r\n                    </tr>\r\n                    <tr className=\"font-weight-bold\">\r\n                        <td>NET</td>\r\n                        <td className=\"text-right\">{calculated.net.toLocaleString()}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatedResult;\r\n","import { Component } from 'react';\r\nimport Header from './Header';\r\nimport DataInput from './DataInput';\r\nimport CalculatedResult from './CalculatedResult';\r\n\r\ninterface State {\r\n    gross: number;\r\n    numberOfDependant: number;\r\n}\r\n\r\nclass SalaryCalculator extends Component<{}, State> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.handleGrossChange = this.handleGrossChange.bind(this);\r\n        this.handleNumberOfDependantChange = this.handleNumberOfDependantChange.bind(this);\r\n\r\n        this.state = {\r\n            gross: 0,\r\n            numberOfDependant: 0,\r\n        };\r\n    }\r\n\r\n    handleGrossChange(gross: number) {\r\n        this.setState({\r\n            gross: gross,\r\n        });\r\n    }\r\n\r\n    handleNumberOfDependantChange(numberOfDependant: number) {\r\n        this.setState({\r\n            numberOfDependant: numberOfDependant,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row mb-4 mt-3\">\r\n                    <div className=\"col\">\r\n                        <Header/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col col-md-6\">\r\n                        <DataInput gross={this.state.gross} onGrossChange={this.handleGrossChange}\r\n                            numberOfDependant={this.state.numberOfDependant} onNumberOfDependantChange={this.handleNumberOfDependantChange}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col col-md-6\">\r\n                        <CalculatedResult gross={this.state.gross} numberOfDependant={this.state.numberOfDependant}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SalaryCalculator;\r\n","import AnimationShapes from './AnimationShapes';\r\nimport './App.css';\r\nimport SalaryCalculator from './SalaryCalculator';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <SalaryCalculator/>\r\n      <AnimationShapes/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'jquery';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}